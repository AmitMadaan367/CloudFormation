Parameters:
    CIDRforVPC:
      Default: 10.0.0.0/16
      Description: Please enter the IP range (CIDR notation) for this VPC
      Type: String

    PublicSubnetCIDR:
      Default: 10.0.0.0/24
      Description: Please enter the IP range (CIDR notation) for the PublicSubnet
      Type: String

    SecondSubnetCIDR:
      Default: 10.0.1.0/24
      Description: Please enter the IP range (CIDR notation) for the PublicSubnet
      Type: String



Resources:

# Creating VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CIDRforVPC
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: MyVPC

  #AWS security group
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress: 
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  # Creating Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyIGW


  # Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  #Creating a Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock : !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet
      VpcId: !Ref VPC

  SecondSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock : !Ref SecondSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: SecondSubnet
      VpcId: !Ref VPC

  #Creating Route table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: PublicRouteTable
      VpcId: !Ref VPC
  


  # Add a Public Route to the Route Table
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  # Associate Public Subnet with Public Route Table
  PublicSubnetRouteTableAssociationFirst:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PublicSubnetRouteTableAssociationSecond:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SecondSubnet



  # Creating Application Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - !Ref PublicSubnet
      - !Ref SecondSubnet
      SecurityGroups:
      - !Ref MySecurityGroup


  # Target Group
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'

      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC

# Creating LoadBalancerListener
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP



  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /v2
      ListenerArn: !Ref LoadBalancerListener
      Priority: 2
  






  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: zz
      ImageId: ami-052efd3df9dad4825
      SecurityGroups:
      - !Ref MySecurityGroup
      InstanceType: t2.micro
      LaunchConfigurationName: LaunchConfig
      UserData: !Base64 |
        #!/bin/bash -x
        sudo apt-get update -y 
        sudo apt-get install apache2 -y 



  #Creating Auto Scaling Group 

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: Garretts Cfn Autoscaling Group
      Cooldown: 120
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref LaunchConfig
      MaxSize: 2
      MinSize: 1
      Tags:
        - 
          Key: Name
          Value: Garretts Cfn ASG
          PropagateAtLaunch: 'true'
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      TargetGroupARNs:
        - !Ref EC2TargetGroup

  

